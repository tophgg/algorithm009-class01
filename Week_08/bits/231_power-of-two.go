package main

// 解法1 判断1的个数为1
// 解法2 采用低位数去除，看是否变为0；时间复杂度O(1),空间复杂度O(1)
// 解法3 获取最右侧的1；由于可得 -x = ~x + 1（补码） 而 x & -x 可以得到最右侧的1的位置，如果是幂的话满足 x & -x = x
// 解法4 二分，递归 时间复杂度O(logN)
func isPowerOfTwo(n int) bool {
	return n != 0 && (n & (-n)) == n
}